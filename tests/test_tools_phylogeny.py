#! /bin/usr/env python
## D.J. Bennett
## 26/05/2014
"""
Tests for phylogeny tools.
"""

import unittest,pickle,os
from Bio import Phylo
from cStringIO import StringIO
import mpe.tools.phylogeny_tools as ptools

## Dirs
working_dir = os.path.dirname(__file__)

## Mock data
with open(os.path.join(working_dir,"data",\
	"test_alignment.p"),"rb") as file:
	alignment = pickle.load(file)

with open(os.path.join(working_dir,"data",\
	"test_alignments.p"),"rb") as file:
	alignments = pickle.load(file)

with open(os.path.join(working_dir,"data",\
	"test_phylo.p"),"rb") as file:
	phylo = pickle.load(file)

with open(os.path.join(working_dir,"data",\
	"test_constraint.tre"),"r") as file:
	constraint = Phylo.read(file, 'newick')

partitions = [0, 1761, 3141]

## Functions
class AlignmentSeq(object):
	def __init__(self, name):
		self.id = name

def genAlignment(names):
	# little function that generates a list of sequences
	#  looks like an alignment to getOutgroup
	return [AlignmentSeq(e) for e in names]

class PhylogenyTestSuite(unittest.TestCase):

	def setUp(self):
		self.partitions = partitions
		self.alignment = alignment
		self.phylo = phylo
		self.alignment = alignment
		self.alignments = alignments
		self.constraint_opt = ' -g .constraint.tre'
		self.constraint = constraint

	def tearDown(self):
		# remove all files potentially generated by ptools
		ptool_files = ['.constraint.tre', 'distribution.tre',\
		'consensus.tre', '.phylogeny_in.phylip.reduced',\
		'RAxML_info..phylogeny_out', '.phylogeny_in.phylip',\
		'.partitions.txt.reduced', '.partitions.txt']
		while ptool_files:
			try:
				ptool_file = ptool_files.pop()
				os.remove(ptool_file)
			except OSError:
				pass

	# def test_getbranchlengths(self):
	# 	# 15 tips, one in-group, one root
	# 	# lengths are all scaled to 1
	# 	# total branch length should equal 17
	# 	res = ptools.getBranchLengths(self.phylo)
	# 	self.assertEqual(sum(res), 17)

	def test_test(self):
		res = ptools.test(self.phylo, 0.5)
		self.assertTrue(res)

	def test_concatenatealignments(self):
		res_alignment,res_partitions = \
			ptools.concatenateAlignments(self.alignments)
		self.assertEqual(res_partitions, self.partitions)
		seq = self.alignment[0]
		for each in res_alignment:
			if each.id == seq.id:
				res_seq = each
		self.assertEqual(str(res_seq.seq), str(seq.seq))
		
	def test_genconstrainttree(self):
		# 4 tips not present in alignment
		res = ptools.genConstraintTree(self.alignment,\
			os.path.join(working_dir, 'data',\
				'test_phylo.tre'))
		self.assertEqual(len(res.get_terminals()), 11)

	def test_genconstraintarg(self):
		constraint = ptools.genConstraintTree(self.alignment,\
			os.path.join(working_dir, 'data',\
			'test_phylo.tre'))
		res_opt = ptools.getConstraintArg(constraint)
		self.assertTrue(os.path.isfile('.constraint.tre'))
		self.assertEqual(res_opt, self.constraint_opt)

	def test_getoutgroup(self):
		# check with outgroup
		alignment = genAlignment(['outgroup','F', 'B', 'H'])
		treestr = '((outgroup:0.1,F:0.1):0.1,(B:0.1,H:0.1):0.1);'
		tree = Phylo.read(StringIO(treestr), "newick")
		res = ptools.getOutgroup(alignment, tree)
		self.assertEqual(res,'outgroup')
		# try without outgroup
		alignment = genAlignment(['D','F', 'B', 'H'])
		treestr = '((D:0.1,F:0.1):0.1,(B:0.1,H:0.1):0.1);'
		tree = Phylo.read(StringIO(treestr), "newick")
		res = ptools.getOutgroup(alignment, tree)
		self.assertNotEqual(res,'outgroup')

	def test_consensus(self):
		# create a list of trees, save it to file, check if consensus.tre
		phylogenies = [self.phylo for i in range(100)]
		with open('distribution.tre', "w") as file:
			Phylo.write(phylogenies, file, 'newick')
		ptools.consensus('distribution.tre', 'consensus.tre',\
			min_freq = 0.5, is_rooted = True, trees_splits_encoded = False)
		self.assertTrue(os.path.isfile('consensus.tre'))

	def test_raxml(self):
		# first write out a .constraint.tre
		with open('.constraint.tre', 'w') as file:
			Phylo.write(self.constraint, file, 'newick')
		phylo = ptools.RAxML(self.alignment,\
			partitions = self.partitions, outgroup = \
			"Ignatius_tetrasporus", constraint = self.constraint_opt)
		self.assertTrue(phylo)

if __name__ == '__main__':
	unittest.main()